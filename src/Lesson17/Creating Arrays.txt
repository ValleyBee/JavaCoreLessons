------------------------------
# THREE STAGES CREATING ARRAY 
-------------------------------

		// any array before use must pass 3 stages creating.
		// Declaration,Allocation and Initialization.
		// 3 stages can be done in deferent ways:
		// by default after Allocation array has default arg of elements;

 1.Declaration
		String[] array2; 
		double[][] array3; 

	#Important examples placing []
		java allows: String array[];String[] array2[];
		java allows: Double[][] array3[];
		java allows: int [] a,b; create two 1D Arrays
		java allows; int [] d, e[][] create 1D d and 3D e Arrays!!! Because[] before int will summary.
						 int d [], e[][] carete 1D d and 2D e Arrays.
		java allows: int b[], c;  means create 1D Array b and varaible c;



 2.Allocation
		array2 = new String[3];
		array3 = new double[4][2];  it means array3 will containe 4four 1D arrays with 2 element each.
 3.Initialization
		array2[0] = "prob";
		array2[1] = "test";
		array2[2] = "make";



CREATING ARRAY Decl.Allo.Init.

#1.Declaration.we declare: Datatype:int; array [] demension 1D; named array2;
Dec.creating array which referce to a null to nothig yet;
		int[] array1;  next needed, Aloc and Init
		String[] array2:

#2.Allocation it is placing elemets in memmory
	essential assign size of array
	array1 = new int[2];
	array2 = new String[3];

#2,3 This is Aloc and Init.
	array6 = new int[] { 4, 5, 6 }; 


#1,2  Declaration and Allocation.
	int[] array5 = new int[5];   

ALL In ONE Decl.Allo.Init.
	int array7 = { 1, 2, 3 }; 


#Allocation
	We can create array with not fixed length:
	example: creating three3 2Darrays with diferent qtty of elements
	{ {-5,2,0,-1}, {4}, {7,3,-2,5,3}}  3pieces 1D array

	int [][] array5; 
	array5 = new int[3][]; no need assing the length of 1D arrays only how many are they.

#Static Allocation array5 with diferent length
	{ {-5,2,0,-1},	{4}, {7,3,-2,5,3}}  3pieces 1D array
	
	{-5,2,0,-1}
	{4}
	{7,3,-2,5,3}
	array5[0] = new int[4];
	array5[1] = new int[1];
	array5[2] = new int[5];


#3.Initialization 2D array5 [3][] with deferent length 
 1st element -5,2,0,-1 ; 2dn element 4 ; 3rd element 7,3,-2,5,3 

#Static Initialization
	array5[0][0] = -5;
	array5[0][1] = 2;
	array5[0][2] = 0;
	array5[0][3] = -1;

	array5[1][0] = 4;


#example how elements of array can be assign by another array1
	double [][] array3;
	[4][2]; 
	{0.0,0.0}, 0
	{0.0,0.0}, 1 
	{0.0,0.0}, 2
	{0.0,0.0}  3

	double [] array4;
	array4 = new double[2];
	array4[0]=2.5;
	array4[1]=3.5;
	{2.5,3.5}


	array3[1] = array4;  means array3[index 1] now containe all args of array4 
	[1] {0.0,0.0} = {2.5,3.5}

	array3=array4; means array3 only referce to the object of array4;

#Dinamic Initialization 1D array one for loop
	int [] array;
	for ( int i=0; i < array1.length; i++ )
	{ array1[i] = i; }

#Dinamic Initialization 2D array two for loop
	int [] [] array;
	for ( int i = 0; i<array.length; i++){
		for( int j = 0; j < array[i].length; j++){
			array[i][j] = argument; 	} 	}


-----------------------------------------
# MIXED DEC ALC INT STAGES CREATING ARRAY 
-----------------------------------------

#Example 1: Declaration & Allocation both,without initialization
	int array = new int[7];
Datatype (int) seven7 elements is length7 default arg is 0

#Example 2: Declaration then Alloc & Init. two steps
	int [] array;
	array = new int[] {1,2,3};
	name      Alloc     Init

#Example 3: Creating All in one, one step: Dec&Alc&init.
	int [] array = {1,2,3}; short way
	int [] array = new int [] {1,2,3}; long way
Datatype (int) 3three elementsis length3 with arg{1,2,3}


